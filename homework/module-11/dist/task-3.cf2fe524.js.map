{"version":3,"sources":["task-2/task-2-3/task-3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","canProcess","id","logSuccess","time","console","log","logError","warn","amount","then","catch"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC5C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD,CAFH;;AAIE,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AACvC,MAAMC,KAAK,GAAGR,yBAAyB,CAAC,GAAD,EAAM,GAAN,CAAvC;AACA,SAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,IAAAA,UAAU,CAAC,YAAM;AACb,UAAMC,UAAU,GAAGV,IAAI,CAACE,MAAL,KAAgB,GAAnC;;AAEA,UAAIQ,UAAJ,EAAgB;AACdH,QAAAA,OAAO,CAAC,CAACH,WAAW,CAACO,EAAb,EAAiBN,KAAjB,CAAD,CAAP;AAED,OAHD,MAGO;AACLG,QAAAA,MAAM,CAACJ,WAAW,CAACO,EAAb,CAAN;AACD;AACF,KATO,EASLN,KATK,CAAV;AAUH,GAXM,CAAP;AAaD,CAfD;;AAiBA,IAAMO,UAAU,GAAG,SAAbA,UAAa,OAAgB;AAAA;AAAA,MAAdD,EAAc;AAAA,MAAVE,IAAU;;AACjCC,EAAAA,OAAO,CAACC,GAAR,uBAA2BJ,EAA3B,2BAA8CE,IAA9C;AACD,CAFD;;AAIA,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAAL,EAAE,EAAI;AACrBG,EAAAA,OAAO,CAACG,IAAR,wCAA6CN,EAA7C;AACD,CAFD;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;;AACE;AACF;AACA;;;AACER,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQP,UADR,EAEGQ,KAFH,CAESJ,QAFT;AAIAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQP,UADR,EAEGQ,KAFH,CAESJ,QAFT;AAIAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQP,UADR,EAEGQ,KAFH,CAESJ,QAFT;AAIAb,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUO,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQP,UADR,EAEGQ,KAFH,CAESJ,QAFT","file":"task-3.cf2fe524.js","sourceRoot":"..","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n  \r\n  const makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            const canProcess = Math.random() > 0.3;\r\n        \r\n            if (canProcess) {\r\n              resolve([transaction.id, delay]);\r\n\r\n            } else {\r\n              reject(transaction.id);\r\n            }\r\n          }, delay);\r\n    })\r\n    \r\n  };\r\n  \r\n  const logSuccess = ([id, time]) => {\r\n    console.log(`Transaction ${id} processed in ${time}ms`);\r\n  };\r\n  \r\n  const logError = id => {\r\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n  };\r\n  \r\n  /*\r\n   * Працює так\r\n   */\r\n//   makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n//   makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n//   makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n//   makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n  /*\r\n   * Повинно працювати так\r\n   */\r\n  makeTransaction({ id: 70, amount: 150 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 71, amount: 230 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 72, amount: 75 })\r\n    .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n  makeTransaction({ id: 73, amount: 100 })\r\n    .then(logSuccess)\r\n    .catch(logError);"]}